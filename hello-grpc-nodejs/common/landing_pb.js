// source: landing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.org.feuyeux.grpc.ResultType', null, global)
goog.exportSymbol('proto.org.feuyeux.grpc.TalkRequest', null, global)
goog.exportSymbol('proto.org.feuyeux.grpc.TalkResponse', null, global)
goog.exportSymbol('proto.org.feuyeux.grpc.TalkResult', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.feuyeux.grpc.TalkRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.org.feuyeux.grpc.TalkRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.feuyeux.grpc.TalkRequest.displayName = 'proto.org.feuyeux.grpc.TalkRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.feuyeux.grpc.TalkResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.org.feuyeux.grpc.TalkResponse.repeatedFields_, null)
}
goog.inherits(proto.org.feuyeux.grpc.TalkResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.feuyeux.grpc.TalkResponse.displayName = 'proto.org.feuyeux.grpc.TalkResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.feuyeux.grpc.TalkResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.org.feuyeux.grpc.TalkResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.org.feuyeux.grpc.TalkResult.displayName = 'proto.org.feuyeux.grpc.TalkResult'
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.feuyeux.grpc.TalkRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.org.feuyeux.grpc.TalkRequest.toObject(opt_includeInstance, this)
    }


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.feuyeux.grpc.TalkRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.feuyeux.grpc.TalkRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            data: jspb.Message.getFieldWithDefault(msg, 1, ""),
            meta: jspb.Message.getFieldWithDefault(msg, 2, "")
        }

        if (includeInstance) {
            obj.$jspbMessageInstance = msg
        }
        return obj
    }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.feuyeux.grpc.TalkRequest}
 */
proto.org.feuyeux.grpc.TalkRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.org.feuyeux.grpc.TalkRequest
    return proto.org.feuyeux.grpc.TalkRequest.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.feuyeux.grpc.TalkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.feuyeux.grpc.TalkRequest}
 */
proto.org.feuyeux.grpc.TalkRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break
        }
        var field = reader.getFieldNumber()
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString())
                msg.setData(value)
                break
            case 2:
                var value = /** @type {string} */ (reader.readString())
                msg.setMeta(value)
                break
            default:
                reader.skipField()
                break
        }
    }
    return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.feuyeux.grpc.TalkRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter()
    proto.org.feuyeux.grpc.TalkRequest.serializeBinaryToWriter(this, writer)
    return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.feuyeux.grpc.TalkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.feuyeux.grpc.TalkRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined
    f = message.getData()
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        )
    }
    f = message.getMeta()
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        )
    }
}


/**
 * optional string data = 1
 * @return {string}
 */
proto.org.feuyeux.grpc.TalkRequest.prototype.getData = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}


/**
 * @param {string} value
 * @return {!proto.org.feuyeux.grpc.TalkRequest} returns this
 */
proto.org.feuyeux.grpc.TalkRequest.prototype.setData = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value)
}


/**
 * optional string meta = 2
 * @return {string}
 */
proto.org.feuyeux.grpc.TalkRequest.prototype.getMeta = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}


/**
 * @param {string} value
 * @return {!proto.org.feuyeux.grpc.TalkRequest} returns this
 */
proto.org.feuyeux.grpc.TalkRequest.prototype.setMeta = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value)
}


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.feuyeux.grpc.TalkResponse.repeatedFields_ = [2]


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.feuyeux.grpc.TalkResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.org.feuyeux.grpc.TalkResponse.toObject(opt_includeInstance, this)
    }


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.feuyeux.grpc.TalkResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.feuyeux.grpc.TalkResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            status: jspb.Message.getFieldWithDefault(msg, 1, 0),
            resultsList: jspb.Message.toObjectList(msg.getResultsList(),
                proto.org.feuyeux.grpc.TalkResult.toObject, includeInstance)
        }

        if (includeInstance) {
            obj.$jspbMessageInstance = msg
        }
        return obj
    }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.feuyeux.grpc.TalkResponse}
 */
proto.org.feuyeux.grpc.TalkResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.org.feuyeux.grpc.TalkResponse
    return proto.org.feuyeux.grpc.TalkResponse.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.feuyeux.grpc.TalkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.feuyeux.grpc.TalkResponse}
 */
proto.org.feuyeux.grpc.TalkResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break
        }
        var field = reader.getFieldNumber()
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32())
                msg.setStatus(value)
                break
            case 2:
                var value = new proto.org.feuyeux.grpc.TalkResult
                reader.readMessage(value, proto.org.feuyeux.grpc.TalkResult.deserializeBinaryFromReader)
                msg.addResults(value)
                break
            default:
                reader.skipField()
                break
        }
    }
    return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter()
    proto.org.feuyeux.grpc.TalkResponse.serializeBinaryToWriter(this, writer)
    return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.feuyeux.grpc.TalkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.feuyeux.grpc.TalkResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined
    f = message.getStatus()
    if (f !== 0) {
        writer.writeInt32(
            1,
            f
        )
    }
    f = message.getResultsList()
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            2,
            f,
            proto.org.feuyeux.grpc.TalkResult.serializeBinaryToWriter
        )
    }
}


/**
 * optional int32 status = 1
 * @return {number}
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.getStatus = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/**
 * @param {number} value
 * @return {!proto.org.feuyeux.grpc.TalkResponse} returns this
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.setStatus = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * repeated TalkResult results = 2
 * @return {!Array<!proto.org.feuyeux.grpc.TalkResult>}
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.getResultsList = function () {
    return /** @type{!Array<!proto.org.feuyeux.grpc.TalkResult>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.org.feuyeux.grpc.TalkResult, 2))
}


/**
 * @param {!Array<!proto.org.feuyeux.grpc.TalkResult>} value
 * @return {!proto.org.feuyeux.grpc.TalkResponse} returns this
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.setResultsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value)
}


/**
 * @param {!proto.org.feuyeux.grpc.TalkResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.feuyeux.grpc.TalkResult}
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.addResults = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.org.feuyeux.grpc.TalkResult, opt_index)
}


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.feuyeux.grpc.TalkResponse} returns this
 */
proto.org.feuyeux.grpc.TalkResponse.prototype.clearResultsList = function () {
    return this.setResultsList([])
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.org.feuyeux.grpc.TalkResult.prototype.toObject = function (opt_includeInstance) {
        return proto.org.feuyeux.grpc.TalkResult.toObject(opt_includeInstance, this)
    }


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.org.feuyeux.grpc.TalkResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.org.feuyeux.grpc.TalkResult.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, 0),
            type: jspb.Message.getFieldWithDefault(msg, 2, 0),
            kvMap: (f = msg.getKvMap()) ? f.toObject(includeInstance, undefined) : []
        }

        if (includeInstance) {
            obj.$jspbMessageInstance = msg
        }
        return obj
    }
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.feuyeux.grpc.TalkResult}
 */
proto.org.feuyeux.grpc.TalkResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.org.feuyeux.grpc.TalkResult
    return proto.org.feuyeux.grpc.TalkResult.deserializeBinaryFromReader(msg, reader)
}


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.feuyeux.grpc.TalkResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.feuyeux.grpc.TalkResult}
 */
proto.org.feuyeux.grpc.TalkResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break
        }
        var field = reader.getFieldNumber()
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64())
                msg.setId(value)
                break
            case 2:
                var value = /** @type {!proto.org.feuyeux.grpc.ResultType} */ (reader.readEnum())
                msg.setType(value)
                break
            case 3:
                var value = msg.getKvMap()
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "")
                })
                break
            default:
                reader.skipField()
                break
        }
    }
    return msg
}


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.feuyeux.grpc.TalkResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter()
    proto.org.feuyeux.grpc.TalkResult.serializeBinaryToWriter(this, writer)
    return writer.getResultBuffer()
}


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.feuyeux.grpc.TalkResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.feuyeux.grpc.TalkResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined
    f = message.getId()
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        )
    }
    f = message.getType()
    if (f !== 0.0) {
        writer.writeEnum(
            2,
            f
        )
    }
    f = message.getKvMap(true)
    if (f && f.getLength() > 0) {
        f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
    }
}


/**
 * optional int64 id = 1
 * @return {number}
 */
proto.org.feuyeux.grpc.TalkResult.prototype.getId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}


/**
 * @param {number} value
 * @return {!proto.org.feuyeux.grpc.TalkResult} returns this
 */
proto.org.feuyeux.grpc.TalkResult.prototype.setId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value)
}


/**
 * optional ResultType type = 2
 * @return {!proto.org.feuyeux.grpc.ResultType}
 */
proto.org.feuyeux.grpc.TalkResult.prototype.getType = function () {
    return /** @type {!proto.org.feuyeux.grpc.ResultType} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}


/**
 * @param {!proto.org.feuyeux.grpc.ResultType} value
 * @return {!proto.org.feuyeux.grpc.TalkResult} returns this
 */
proto.org.feuyeux.grpc.TalkResult.prototype.setType = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value)
}


/**
 * map<string, string> kv = 3
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.org.feuyeux.grpc.TalkResult.prototype.getKvMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,string>} */ (
        jspb.Message.getMapField(this, 3, opt_noLazyCreate,
            null))
}


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.org.feuyeux.grpc.TalkResult} returns this
 */
proto.org.feuyeux.grpc.TalkResult.prototype.clearKvMap = function () {
    this.getKvMap().clear()
    return this
}


/**
 * @enum {number}
 */
proto.org.feuyeux.grpc.ResultType = {
    OK: 0,
    FAIL: 1
}

goog.object.extend(exports, proto.org.feuyeux.grpc)
